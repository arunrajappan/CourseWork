> library(bnlearn)
> library(Rgraphviz)
> library(microbenchmark)
> 
> args <- commandArgs(trailingOnly = TRUE)
> sink(file="./log_insurance.rlog")
> sink()
> args <- array(c("asia"),c(1,1))
> print("args ==")
[1] "args =="
> print(args[1])
[1] "asia"
> 
> # vDatasets <- list()#"alarm" = alarm,"hailfinder" = hailfinder,"insurance" = insurance)
> # vDatasets["alarm"] <- alarm
> # vDatasets["hailfinder"] <- hailfinder
> # vDatasets["insurance"] <- insurance
> 
> # print(vDatasets)
> print("#################################################")
[1] "#################################################"
> print("##Score Based Algorithms#########################")
[1] "##Score Based Algorithms#########################"
> print("#################################################")
[1] "#################################################"
> if(identical(args[1], "alarm")){
+ data(alarm)
+ input = alarm
+ print("Using Alarm Dataset")
+ }else if(identical(args[1], "insurance")){
+   data(insurance)
+   input = insurance
+   print("Using insurance Dataset")
+ }else if(identical(args[1], "hailfinder")){
+   data(hailfinder)
+   input = hailfinder
+   print("Using hailfinder Dataset")
+ }else if(identical(args[1], "asia")){
+   data(asia)
+   input = asia
+   print("Using coronary Dataset")
+ }else{
+   data(alarm)
+   input = alarm
+   print("Defaults: Using Alarm Dataset")
+ }
[1] "Using coronary Dataset"
> 
> ##################################################################################################
> ##Execute different algorithms
>   #### Score based algorithm
>   bn.hc = hc(input, debug=FALSE) #Hill Climbing algorithm
>   
>   #### Constraint Based Algorithm
>   v_gs = gs(alarm, blacklist=NULL) ##Grow Shrink algorithm
>   V_iamb  = iamb(input,blacklist=NULL) ##c("FIO2","PVS") Incremental Association Marklov Blanket (IAMB) algorithmi
>   v_fiamb = fast.iamb(input,blacklist=NULL) ##Fast Incremental Association Marklov Blanket (Fast-IAMB) algorithm
>   v_iiamb = inter.iamb(input,blacklist=NULL) ##Interleaved Incremental Association Marklov Blanket (Inter-IAMB) algorithm
>   
>   #### Hybrid Algorithm
>   v_mmhc = mmhc(input, debug=FALSE) ##Max-min hill climbing
>   v_rsmax2 = rsmax2(input) ##Two-Phase Restricted Maximization (RSMAX2) algorithm
>   
>   #### Local Discovery algorithm
>   v_cl = chow.liu(input, debug=FALSE) ##Chow Liu algorithm
> 
>   sink()
> ##################################################################################################
> 
> 
> ##################################################################################################
> ##Compare results for each algorithms
> print("Comparision between HC and self:")
[1] "Comparision between HC and self:"
> print(unlist(compare(bn.hc,bn.hc)) )
tp fp fn 
 7  0  0 
> 
> print("Comparision between HC and GS:")
[1] "Comparision between HC and GS:"
> print(unlist(compare(bn.hc,v_gs)))
Error in match.bn(target, current) : 
  the two networks have different node sets.
> 
> print("Comparision between HC and IAMB:")
[1] "Comparision between HC and IAMB:"
> print(unlist(compare(bn.hc,V_iamb)))
tp fp fn 
 3  1  4 
> 
> print("Comparision between HC and Fast-IAMB:")
[1] "Comparision between HC and Fast-IAMB:"
> print(unlist(compare(bn.hc,v_fiamb)))
tp fp fn 
 3  1  4 
> 
> print("Comparision between HC and Inter-IAMB:")
[1] "Comparision between HC and Inter-IAMB:"
> print(unlist(compare(bn.hc,v_iiamb)))
tp fp fn 
 3  1  4 
> 
> print("Comparision between HC and  MMHC:")
[1] "Comparision between HC and  MMHC:"
> print(unlist(compare(bn.hc,v_mmhc)))
tp fp fn 
 5  1  2 
> 
> print("Comparision between HC and RSMAX2:")
[1] "Comparision between HC and RSMAX2:"
> print(unlist(compare(bn.hc,v_rsmax2)))
tp fp fn 
 4  0  3 
> 
> print("Comparision between HC and Chow Liu:")
[1] "Comparision between HC and Chow Liu:"
> print(unlist(compare(bn.hc,v_cl)))
tp fp fn 
 0  7  7 
> 
> 
> sink()
> ##################################################################################################
> 
> ##################################################################################################
> ##Get execution time for different algorithms
> print("execution time for HC:")
[1] "execution time for HC:"
> print(system.time(hc(input)))
   user  system elapsed 
   0.01    0.00    0.01 
> 
> print("execution time for GC:")
[1] "execution time for GC:"
> print(system.time( gc(input)))
Garbage collection 5249 = 4823+217+209 (level 2) ... 
38.5 Mbytes of cons cells used (62%)
29.0 Mbytes of vectors used (50%)
   user  system elapsed 
   0.06    0.00    0.06 
> 
> print("execution time for IAMB:")
[1] "execution time for IAMB:"
> print(system.time(iamb(input)))
   user  system elapsed 
   0.03    0.00    0.04 
> 
> print("execution time for Fast-IAMB:")
[1] "execution time for Fast-IAMB:"
> print(system.time(fast.iamb(input)))
   user  system elapsed 
   0.05    0.00    0.04 
> 
> print("execution time for Inter-IAMB:")
[1] "execution time for Inter-IAMB:"
> print(system.time(inter.iamb(input)) )
   user  system elapsed 
   0.03    0.00    0.03 
> 
> print("execution time for MMHC:")
[1] "execution time for MMHC:"
> print(system.time(mmhc(input)) )
   user  system elapsed 
   0.04    0.00    0.03 
> 
> print("execution time for RSMAX2:")
[1] "execution time for RSMAX2:"
> print(system.time(rsmax2(input)))
   user  system elapsed 
   0.03    0.00    0.04 
> 
> print("execution time for Chow Liu:")
[1] "execution time for Chow Liu:"
> print(system.time(chow.liu(input)))
   user  system elapsed 
   0.02    0.00    0.01 
> 
> sink()
> ##################################################################################################
> 
> ##################################################################################################
> ##Get Scores for different algorithms
> 
> print("LogLik Score for HC:")
[1] "LogLik Score for HC:"
> print(score(bn.hc,input,type="loglik"))
[1] -11034.9
> 
> print("LogLik  Score for GC:")
[1] "LogLik  Score for GC:"
> print(score(v_gs,input,type="loglik"))
Error in check.bn.vs.data(x, data) : 
  the network and the data have different numbers of variables.
> 
> print("LogLik Score for IAMB:")
[1] "LogLik Score for IAMB:"
> print(score(V_iamb,input,type="loglik"))
[1] -12466.88
> 
> print("LogLik Score for Fast-IAMB:")
[1] "LogLik Score for Fast-IAMB:"
> print(score(V_fiamb,input,type="loglik"))
Error in match(x, table, nomatch = 0L) : object 'V_fiamb' not found
> 
> print("LogLik Score for Inter-IAMB:")
[1] "LogLik Score for Inter-IAMB:"
> print(score(V_iiamb,input,type="loglik"))
Error in match(x, table, nomatch = 0L) : object 'V_iiamb' not found
> 
> print("LogLik Score for MMHC:")
[1] "LogLik Score for MMHC:"
> print(score(v_mmhc,input,type="loglik"))
[1] -12016.23
> 
> print("LogLik Score for RSMAX2:")
[1] "LogLik Score for RSMAX2:"
> print(score(v_rsmax2,input,type="loglik"))
[1] -12231.6
> 
> print("LogLik Score for Chow Liu:")
[1] "LogLik Score for Chow Liu:"
> print(score(v_cl,input,type="loglik"))  
Error in score(v_cl, input, type = "loglik") : 
  the graph is only partially directed.
> 
> sink()
> 
> 
> print("K2 Score for HC:")
[1] "K2 Score for HC:"
> print(score(bn.hc,input,type="k2"))
[1] -11109.47
> 
> print("K2  Score for GC:")
[1] "K2  Score for GC:"
> print(score(v_gs,input,type="k2"))
Error in check.bn.vs.data(x, data) : 
  the network and the data have different numbers of variables.
> 
> print("K2 Score for IAMB:")
[1] "K2 Score for IAMB:"
> print(score(v_iamb,input,type="k2"))
Error in match(x, table, nomatch = 0L) : object 'v_iamb' not found
> 
> print("K2 Score for Fast-IAMB:")
[1] "K2 Score for Fast-IAMB:"
> print(score(v_fiamb,input,type="k2"))
[1] -12529.7
> 
> print("K2 Score for Inter-IAMB:")
[1] "K2 Score for Inter-IAMB:"
> print(score(v_iiamb,input,type="k2"))
[1] -12529.7
> 
> print("K2 Score for MMHC:")
[1] "K2 Score for MMHC:"
> print(score(v_mmhc,input,type="k2"))
[1] -12086.05
> 
> print("K2 Score for RSMAX2:")
[1] "K2 Score for RSMAX2:"
> print(score(v_rsmax2,input,type="k2"))
[1] -12291.37
> 
> print("K2 Score for Chow Liu:")
[1] "K2 Score for Chow Liu:"
> print(score(v_cl,input,type="k2"))  
Error in score(v_cl, input, type = "k2") : 
  the graph is only partially directed.
> 
> sink()